'''
Purpose: This point of this is to give a gui/ feedback system
        for the user to see what the robot is doing and how
        to set up the board. It also displays which boxes are
        being delete. More will be added when needed.
        
Project: Robotics Arm Research 

Author: Devon Adair

Last Modified Date: 10/31/2016
'''

import tkinter
from tkinter import *
from tkinter import ttk

# Array to hold all of the boxes in
box = []

# This class is just for the purpose of entry box and demostrating
# that boxes can be deleted and the board can be reset.
class Data():
    def __init__(self):
        self.box = None


# This function is used to create a grid system on the canvas
def grid(canvas):
    for k in range(4):
        # Row of Lines
        canvas.create_line(0, k * 150, 600, k * 150, width=3)
        # Column of lines
        canvas.create_line(k * 150, 0, k * 150, 600, width=3)

# This function creates the boxes and then manually you choose
# which boxes to delete
def boxes(canvas):
    # Fills all the boxes in the grid and need to specify
    # which ones to delete to create the pattern.
    for k in range(3):
        m = k * 150 + 25
        for j in range(3):
            num = (k * 4 + j)
            print(int(25 + 150 * k))
            box_num = canvas.create_rectangle(25 + 150 * j, 25 + 150 * k, 125 + j * 150, 125 + k * 150)

# To get back to the original state
def restart(canvas, box):
    for k in range(16):
        canvas.delete(box[k])

    del box[:]
    start(canvas)

# Begins the game and board. Also adds number to the boxes
def start(canvas):
    for k in range(4):
        for j in range(4):
            num = canvas.create_rectangle(25 + 150 * j, 25 + 150 * k, 125 + j * 150, 125 + k * 150, fill="#476042")
            canvas.create_text((75 + 150 * j, 75 + 150 * k), text=(j + k * 4), font=('Times New Roman', 20))
            box.append(num)

# Removes the selected box that is currently being pick from
# a text box
def box_removal(box, data, canvas):
    number = int(data.box.get())


    canvas.delete(box[number])


def main():
    data = Data()

    # Tinker is being defined and the frames are being set up
    root = tkinter.Tk()
    main_frame = ttk.Frame(root, padding=(25, 25))
    secondary_frame = ttk.Frame(root, padding=(25, 25))
    main_frame.grid(row=0, column=0)
    secondary_frame.grid(row=0, column=1, sticky=N)

    # Text box to give feedback in the GUI
    text_box = Text(secondary_frame, width=30, height=5)
    text_box.grid(row=0, column=0)

    # Label for the Entry Box
    label = ttk.Label(secondary_frame, text='Enter Box to delete: ')
    label.grid(row=2, column=0, sticky=W)

    label_text = ttk.Label(secondary_frame, text='The Entry must be a number from 0-15')
    label_text.grid(row=1, column=0, sticky=W, padx=10, pady=10)

    # The entry box to decided which box to get rid of
    box_entry = ttk.Entry(secondary_frame, width=20)
    box_entry.grid(row=2, column=0, sticky=E)

    data.box = tkinter.StringVar()
    box_entry['textvariable'] = data.box

    # The canvas for the board and grid of boxes
    canvas = Canvas(main_frame, width=600, height=600)
    canvas.grid()

    # The buttons for start, delete, and reset. The delete button
    # deletes the box number that you typed in the entry box.
    # Start begins the game with a clean board. Reset resets the
    # board back to the starting state to begin again.
    delete_button = ttk.Button(secondary_frame,
                                     text='Delete Box')
    delete_button.grid(row=3, column=0, sticky=W)
    delete_button['command'] = lambda: box_removal(box, data, canvas)


    reset_button = ttk.Button(secondary_frame,
                                     text='Reset Board')
    reset_button.grid(row=4, column=0, sticky=W)
    reset_button['command'] = lambda: restart(canvas, box)

    start_button = ttk.Button(secondary_frame,
                                     text='Start Board')
    start_button.grid(row=5, column=0, sticky=W)
    start_button['command'] = lambda: start(canvas)

    # Calls the function to create the grid on the canvas
    grid(canvas)

    # What is put into the text box
    text_box.insert('1.0', 'Box Number Selected: ' + '\n' + \
                    'Robot Status: ')

    root.mainloop()


if __name__ == '__main__':
    main()


